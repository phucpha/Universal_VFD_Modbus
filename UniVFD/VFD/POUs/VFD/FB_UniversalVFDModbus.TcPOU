<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_UniversalVFDModbus" Id="{218756d0-612e-48ed-8e53-949cee63529d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK abstract FB_UniversalVFDModbus EXTENDS FB_ModbusSlave IMPLEMENTS I_UniversalVFD
VAR
	eVfdState	: E_Vfd_State;
	bInit	: BOOL;
	bBusy	: BOOL;
	bReset	: BOOL;
	bStop	: BOOL;
	bAbort : BOOL;
	bError : BOOL;
	bWarning : BOOL;// status
	bRunningForward	: BOOL;// in state running forward
	bRunningReverse	: BOOL; // in state running reverse
	bRanForward	: BOOL;
	bRanReverse	: BOOL;
	lrHzActual	: LREAL;
	lrDcVoltage		: LREAL;
	lrVacOutToMotor	: LREAL;
	lrCurrent	: LREAL;	
	lrPowerKw	: LREAL;	
	eVfdStatus	: E_VFD_Status;
	lrHzControl	: LREAL;// value in range(0.0-50.0Hz)
	iErrorID		: UDINT;

	lrSpeed : LREAL;
	lrTorque : LREAL;
	lrTotalKwh : LREAL;
	lrRatedPower : LREAL;
	bActive: BOOL;
	bOverLoad: BOOL;
	bStopLog: BOOL;
	bStopped: BOOL;
	
	VFD_CTRL_RESET_FAULT : WORD;
	VFD_CTRL_RUN_FORWARD :WORD;
	VFD_CTRL_RUN_REVERSE :WORD ;
	VFD_CTRL_STOP_FREE 		:WORD ;
	VFD_CTRL_STOP_SPEED_DOWN	:WORD ;
	
	tonStopDelay: Ton;
	// time delay after status = stop
	tStopDelay: TIME := T#4S;

END_VAR
VAR CONSTANT
	// index
	iCTRL_WORD	: UINT := 0;
	iCTRL_FREQUENCY_WORD :UINT := 1;
	iSTATUS_WORD	: UINT := 0;


END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[StateMachine();
CASE eVfdStatus OF
	VFD_STATUS_RUNNING_FORWARD :
		bRanForward := TRUE;
		bRanReverse := FALSE;
		bStopped := FALSE;
	VFD_STATUS_RUNNING_REVERSE:
		bRanForward := FALSE;
		bRanReverse := TRUE;
		bStopped := FALSE;
	VFD_STATUS_FAULT,VFD_STATUS_STOP:
		bRanForward := FALSE;
		bRanReverse := FALSE;
		bStopped := TRUE;
		
END_CASE
bError := eVfdStatus = VFD_STATUS_FAULT;
bActive := eVfdState >= VFD_IDLE;]]></ST>
    </Implementation>
    <Folder Name="MR" Id="{bd5cd554-879a-4201-b28f-5c47833969b1}" />
    <Folder Name="MS" Id="{c35aa3da-6bb6-415a-8b39-338b5a806a33}" />
    <Folder Name="Pro" Id="{445a1ee2-8690-4398-8958-7a1d7b41ed02}" />
    <Property Name="Active" Id="{c27887fb-c492-4b7e-89d7-acc86faca04e}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY Active : REFERENCE TO  bool]]></Declaration>
      <Get Name="Get" Id="{231f04f1-854b-4524-9a7a-30adf2b5b005}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active REF= bActive;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AcVoltageToMotor" Id="{5f14a5f9-5f3b-4e73-afd6-4f18bb63ad97}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY AcVoltageToMotor : Reference to lreal]]></Declaration>
      <Get Name="Get" Id="{3ddff3cf-335e-4a44-8f33-79a2c852bd07}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AcVoltageToMotor ref= lrVacOutToMotor;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Busy" Id="{5c85f589-4485-4bfe-bd13-199f6fff2509}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY Busy : reference to bool]]></Declaration>
      <Get Name="Get" Id="{bd76c115-ffef-4561-b825-e1d3c3825fab}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy ref= bBusy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Convert" Id="{f4c08b77-e954-42a5-a631-8c5995d9fc69}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD Convert : BOOL
VAR_INPUT
	iRegionNo	:	INT;
	pReadData	:	POINTER TO word;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*CASE iRegionNo OF
	0:
		// Status word
		Inverter_Ready		:=  pReadData[0].0;
		InverterReadyToRun	:=  pReadData[0].1;
		InverterRunning		:=  pReadData[0].2;
		InverterFaultActive :=  pReadData[0].3;
		OFF2_active			:= NOT pReadData[0].4;
		OFF3_active			:= NOT  pReadData[0].5;
		ON_inhibit_active 	 := pReadData[0].6;
		Inverter_warning_active := pReadData[0].7;
		Deviation_setpoint_OR_ActiveValue := NOT pReadData[0].8;
		PZD_control 		:= pReadData[0].9;
		Motor_current_Or_torque_limit  := NOT pReadData[0].11;
		Brake_open	 := pReadData[0].12;
		Motor_overload := NOT pReadData[0].13;
		Motor_RunRight	:= pReadData[0].14;
		Inverter_overload :=  NOT pReadData[0].15;
		
		IF InverterFaultActive THEN
			eStatus := VFD_STATUS_FAULT;
		ELSIF InverterFaultActive THEN
			eStatus := VFD_STATUS_WARNING;
		ELSIF InverterRunning THEN
			IF Motor_RunRight THEN
				eStatus := VFD_STATUS_RUNNING_FORWARD;
			ELSE
				eStatus := VFD_STATUS_RUNNING_REVERSE;
			END_IF
		ELSIF NOT InverterRunning THEN
			eStatus := VFD_STATUS_STOP;
		END_IF

		// Speed word
		lrHz_actual := WORD_TO_LREAL( pReadData[1])*50/16383;
		
	1:
		///  actual  Speed ( rpm) (unit A : Scale factor 1), Current ( A , 100, , Torque (Nm, 100)
	//, Actual Power (kw, 100), Total Kwh( 1), Dc bus Voltage(1), REFERENCE( hz, 100), RATED PWR( 100),OUTPUT VOLTS(1)
		lrSpeed := pReadData[0];
		lrCurrent := WORD_TO_LREAL(pReadData[1])/100;
		lrTorque := WORD_TO_LREAL(pReadData[2])/100;
		lrPower := WORD_TO_LREAL(pReadData[3])/100;
		lrTotalKwh := WORD_TO_LREAL(pReadData[4]);
		lrDc_Voltage := WORD_TO_LREAL(pReadData[5]);
		lrRatedPower := WORD_TO_LREAL(pReadData[7])/100;
		lrVAC_OutToMotor := WORD_TO_LREAL(pReadData[8]);
END_CASE
*)
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Current" Id="{cc7adb18-6008-4197-84ca-4e61116074bf}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY Current : reference to lreal]]></Declaration>
      <Get Name="Get" Id="{f35cc3d5-4da7-4eae-bc5f-44e69aaa95a1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Current ref= lrCurrent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="DcVoltage" Id="{53eb5e87-ac44-4e26-bdd8-0ee08e91b7e8}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY DcVoltage : Reference to lreal]]></Declaration>
      <Get Name="Get" Id="{c683587c-b857-4874-ab4d-db02ef3fbb50}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DcVoltage ref= lrDcVoltage;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{2bdb6e30-c54b-4bd0-8a8d-de32e855496b}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY Error : REFERENCE to bool]]></Declaration>
      <Get Name="Get" Id="{ef6fe521-bf9a-49fb-bd4b-7a6c9eaf8a3d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error ref= bError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorID" Id="{f2add6d4-3cb6-4456-98da-b86715ce6415}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY ErrorID : reference to UDINT]]></Declaration>
      <Get Name="Get" Id="{80a17aea-9757-4c00-b6f6-f4afdc019293}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorID ref= iErrorID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FirstCycle" Id="{6d68d29c-2866-4975-9c45-ac338928650a}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD  FirstCycle 
VAR_INPUT
	sName : STRING;
	iUnitID : BYTE ; // modbus address of the device : 1- 255
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.sName := sName;
THIS^.iUnitID := iUnitID;
(*(*HSW (speed setpoint), HIW (actual speed), STW (control word), ZSW (status word) refer to
control data. For more information, see parameters r2018 and P2019 in Chapter "Parameter
list (Page 147)*)
//ZSW  (status WORD), HIW (actual speed)
	arrAddress[0][0] := 109;
	arrAddress[0][1]	:= 2;

///  actual  Speed ( rpm) (unit A : Scale factor 1), Current ( A , 100, , Torque (Nm, 100)
	//, Actual Power (kw, 100), Total Kwh( 1), Dc bus Voltage(1), REFERENCE( hz, 100), RATED PWR( 100),OUTPUT VOLTS(1)
	arrAddress[1][0] := 24;
	arrAddress[1][1] := 10;

	
iNumAddRegion	:= 2;
/////write control  VFD
	
// Frequency

arrAddressWrite[0][0]	:= 100;
arrAddressWrite[0][1] 	:= 1;
arrAddressWrite[0][2]	:= LREAL_TO_WORD( FC_ScaleValue(	rangeRawMin := 0,
															rangeRawMax := 50,
															RangeScaleMin :=0,
															RangeScaleMax := 16384,
															ValueRaw := lrHz_Control) );
// Control word																	
arrAddressWrite[1][0]	:= 99;
arrAddressWrite[1][1] := 1;
arrAddressWrite[1][2]	:= 1150; //VFD_CTRL_STOP_SPEED_DOWN
iNumAddRegionWrite := 2;
*)]]></ST>
      </Implementation>
    </Method>
    <Property Name="HzActual" Id="{a63535e9-b079-49cc-8cfa-02bbf8cb6d1e}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY HzActual : REFERENCE TO  LReal]]></Declaration>
      <Get Name="Get" Id="{cd46b4cf-0fb4-440e-b73f-acf8eb29658f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HzActual ref= lrHzActual;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HzControl" Id="{847818af-6a3e-419c-8ee5-51bdc748b99a}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY HzControl : reference to LReal]]></Declaration>
      <Get Name="Get" Id="{260d3f56-0967-483d-adb3-80d29413a8b1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HzControl ref= lrHzControl;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InHz" Id="{0973b887-90fc-413b-bd37-5bf992843711}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY InHz : bool]]></Declaration>
      <Get Name="Get" Id="{69d3d820-32e7-45d3-a12b-d1a3933ffc71}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InHz :=  F_InRange( bound1 := lrHzControl +1,
					bound2 := lrHzControl -1,
					value := lrHzActual) ;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="isRunForward" Id="{4e8709e3-c3da-4223-bf00-223409f23591}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY isRunForward : bool]]></Declaration>
      <Get Name="Get" Id="{64d7e920-73d1-4775-8289-b6df3e8537d2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[isRunForward := bRanForward;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsRunning" Id="{57e0a5a9-5b9d-4c3d-93e8-4b7cf5aec1f5}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY IsRunning : bool]]></Declaration>
      <Get Name="Get" Id="{80f9fef0-6bb9-43ac-8927-635f16841f31}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsRunning := eVfdStatus = VFD_STATUS_RUNNING_FORWARD
			 OR  eVfdStatus = VFD_STATUS_RUNNING_REVERSE;
	]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="isRunReverse" Id="{5fbf05b3-6f19-49f6-86e2-daff83e0df6c}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY isRunReverse : bool]]></Declaration>
      <Get Name="Get" Id="{9642e99e-b93c-471e-9b49-28795e09f6f9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[isRunReverse := bRanReverse;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="isStop" Id="{86232ba9-ab3b-4cf0-9c96-041239f4c168}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY isStop : bool]]></Declaration>
      <Get Name="Get" Id="{6cf5cf41-ff30-4216-b1e7-d5771894c0b4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[isStop := bStopped;
		]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MR_Abort" Id="{e8a80b2d-2673-4346-a00d-c0d102e5c82d}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD MR_Abort : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eVfdState >= VFD_INITIALIZING THEN
	bAbort := TRUE;
	eVfdState := VFD_ABORTING;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : abort requested'));
	bBusy := TRUE;
	
ELSIF eVfdState = VFD_UNINITIALIZED THEN
	bAbort 		:= FALSE;
	MR_Abort	:= TRUE;
	bBusy := FALSE;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : abort done'));
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_Init" Id="{de2a3891-47d3-4163-a868-ce0528202b5e}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD MR_Init : bool
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eVFDState = VFD_UNINITIALIZED THEN
	bInit := TRUE;
	MR_Init := FALSE;
	eVfdState := VFD_INITIALIZING;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : initialization requested'));
	bBusy := TRUE;
	
ELSIF eVFDState = VFD_READY_INITIALIZED THEN
	bInit := FALSE;
	MR_Init := TRUE;
	bBusy := FALSE;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : initialization done'));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_Reset" Id="{2bdc3e6e-4954-4190-9f28-8a8457e364d7}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD MR_Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eVfdState >= VFD_IDLE AND bError THEN
	bReset := TRUE;
	eVfdState := VFD_RESET;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : reset requested'));			
	bBusy := TRUE;
	
ELSIF eVfdState = VFD_RESET_DONE THEN
	bError := FALSE;
	iErrorID := 0;
	bReset := FALSE;
	MR_Reset := TRUE;
	bBusy := FALSE;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : reset done'));		
		
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_RunForward" Id="{db4982e0-0c38-4a5a-b38a-2adf1fd682c3}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD MR_RunForward : BOOL
VAR_INPUT
	hz : LREAL; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eVfdState = VFD_IDLE  AND (NOT  F_InRange( 	bound1 := lrHzControl + 0.01,
												bound2 := lrHzControl - 0.01,
												value :=  hz)
								OR bRanReverse
								OR bStopped)
THEN
	lrHzControl := hz;
	bRunningForward := TRUE;
	MR_RunForward := FALSE;
	eVfdState := VFD_RUN_FORWARD;
	fbMachineLogger.MR_AddLogs( sLogMessage := FUN_MergeStrings4(  sName,' : run ',LREAL_TO_STRING( lrHzControl),' forward requested'));		
	bBusy := TRUE;
	
ELSIF eVfdState = VFD_RUN_FORWARD_DONE THEN
	bRunningForward := FALSE;
	MR_RunForward := TRUE;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : run forward done'));	
	bBusy := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_RunReverse" Id="{35569046-4001-4b47-8999-0c6321e7807c}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD MR_RunReverse : BOOL// must stop before call run reverse or forward
VAR_INPUT
	hz : LREAL; // >0 and < 50;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eVfdState = VFD_IDLE  AND (NOT  F_InRange( 	bound1 := lrHzControl + 0.01,
												bound2 := lrHzControl - 0.01,
												value :=  hz)
								OR bRanForward
								OR bStopped)
THEN
	lrHzControl := hz;
	bRunningReverse := TRUE;
	MR_RunReverse := FALSE;
	eVfdState := VFD_RUN_REVERSE;
	fbMachineLogger.MR_AddLogs( sLogMessage := FUN_MergeStrings4(  sName,' : run ',LREAL_TO_STRING( lrHzControl),' forward requested'));		
	bBusy := TRUE;
	
ELSIF eVfdState = VFD_RUN_REVERSE_DONE THEN
	bRunningReverse := FALSE;
	MR_RunReverse := TRUE;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : run forward done'));
	bBusy := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_Stop" Id="{d61e11cb-90ac-46df-8a8d-2188731f7dcc}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD MR_Stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eVfdState >= VFD_IDLE AND eVfdState <> VFD_STOP_DONE THEN
	IF NOT bStopLog THEN 
		fbMachineLogger.MR_AddLogs(CONCAT(sName,' : stop requested'));
		bStopLog := TRUE;	
	END_IF
	
	bStop := TRUE;
	eVfdState := VFD_STOP;
	bBusy := TRUE;
	
ELSIF eVfdState = VFD_STOP_DONE THEN
	bStop 		:= FALSE;
	MR_Stop 	:= TRUE;
	bStopLog 	:= FALSE;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : stop done'));	
	bBusy := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Aborting" Id="{7340f979-e913-4927-813d-53316372cb0e}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Aborting]]></Declaration>
      <Implementation>
        <ST><![CDATA[lrHzControl := 0;
bInit := FALSE;
bRunningForward := FALSE;
bRunningReverse := FALSE;
bReset := FALSE;
bRanForward := FALSE;
bRanReverse := FALSE;
bOverLoad := FALSE;
bStop := FALSE;
bStopLog := FALSE;
bStopped := FALSE;
THIS^.tonStopDelay(IN :=FALSE);
IF eVfdStatus = VFD_STATUS_STOP OR eVfdStatus = VFD_STATUS_FAULT THEN
	eVfdState := VFD_UNINITIALIZED;
END_IF ]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Idle" Id="{1ee53fd3-372d-4672-9b04-0f6ce059bbab}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Idle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Initializing" Id="{04d14cc6-499b-4615-ae1c-95f29a3150f2}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD  PROTECTED  MS_Initializing
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// from Subclass call Super^.MS_Initializing
arrAddressWrite[iCTRL_WORD][2]	:= VFD_CTRL_RESET_FAULT;
IF eVfdStatus = VFD_STATUS_READY_TO_RUN THEN
	eVFDState := VFD_READY_INITIALIZED;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ReadyInitialized" Id="{58d13ab0-a73a-4623-ae39-146cb94f2b60}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ReadyInitialized
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInit THEN
	eVfdState := VFD_IDLE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Reset" Id="{298ba71e-5369-4756-8847-56a792cfe08b}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED  MS_Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[arrAddressWrite[iCTRL_WORD][2]	:= VFD_CTRL_RESET_FAULT;
IF THIS^.evfdStatus <>  VFD_STATUS_NOT_RESPOND AND
	THIS^.evfdStatus <>  VFD_STATUS_FAULT THEN
	evfdState := VFD_RESET_DONE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ResetDone" Id="{4df641f5-7b99-4d14-97cc-206423cbaaff}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ResetDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bReset THEN
	evfdState := VFD_IDLE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_RunForward" Id="{9bbcb090-e2cf-49e5-aaa9-3d67622499d4}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED  MS_RunForward
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*arrAddressWrite[iCtrlFrequencyWord][2] :=  LREAL_TO_WORD( 
											FC_ScaleValue(		rangeRawMin := 0,
																rangeRawMax := 50,
																RangeScaleMin := WORD_TO_LREAL( wHzWordValueMin),
																RangeScaleMax := WORD_TO_LREAL( wHzWordValueMax),
																ValueRaw := lrHzControl) 
														);*)
arrAddressWrite[iCTRL_WORD][2]	:= VFD_CTRL_RUN_FORWARD;
IF eVfdStatus = VFD_STATUS_RUNNING_FORWARD 
(*AND F_InRange( bound1 := lrHzControl + 1,
				bound2 := lrHzControl -1,
				value := lrHzActual)*)
THEN
	eVFDState := VFD_RUN_FORWARD_DONE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_RunForwardDone" Id="{0e3b2cbb-907c-4c66-b746-e97509edbba3}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_RunForwardDone

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bRunningForward THEN
	eVfdState := VFD_IDLE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_RunReverse" Id="{aa6997a8-d244-4c31-b7b3-b93d881f69d3}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED  MS_RunReverse
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*arrAddressWrite[iCtrlFrequencyWord][2] :=  LREAL_TO_WORD( 
											FC_ScaleValue(		rangeRawMin := 0,
																rangeRawMax := 50,
																RangeScaleMin := WORD_TO_LREAL( wHzWordValueMin),
																RangeScaleMax := WORD_TO_LREAL( wHzWordValueMax),
																ValueRaw := lrHzControl) 
														);*)
arrAddressWrite[iCTRL_WORD][2]	:= VFD_CTRL_RUN_REVERSE;
IF eVfdStatus = VFD_STATUS_RUNNING_REVERSE 
(*AND F_InRange( bound1 := lrHzControl + 1,
				bound2 := lrHzControl -1,
				value := lrHzActual)*)
THEN
	eVFDState := VFD_RUN_REVERSE_DONE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_RunReverseDone" Id="{666b33b6-f7e3-46b4-b41e-b130ccc3d405}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_RunReverseDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bRunningReverse THEN
	eVfdState := VFD_IDLE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Stop" Id="{4d46d6c7-2573-43e9-b4a6-e57c14b29b10}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD protected  MS_Stop 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[arrAddressWrite[iCTRL_WORD][2]	:= VFD_CTRL_STOP_SPEED_DOWN;
(*tonStopDelay( in := eVfdStatus = VFD_STATUS_STOP,
				PT := tStopDelay);*)
IF eVfdStatus = VFD_STATUS_STOP THEN
 eVfdState := VFD_STOP_DONE;	
END_IF
(*IF tonStopDelay.Q THEN
	tonStopDelay(IN := FALSE);
	
END_IF*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="Ms_StopDone" Id="{ec169d85-a240-4686-9bf3-b74eadf19895}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD protected Ms_StopDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bStop THEN
	eVfdState := VFD_IDLE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Uninitialized" Id="{3d98b249-ea9d-4787-81b3-3aaa1d95c98a}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Uninitialized
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="Overload" Id="{344fd9fe-f321-4c65-826f-14cbdf07507d}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY Overload : reference TO BOOL]]></Declaration>
      <Get Name="Get" Id="{96d199ff-e553-4442-860f-f94594a6a7f1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Overload REF= bOverLoad;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="PowerKw" Id="{80c7f671-fa73-4d38-bd04-d083dea8ea36}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY PowerKw : REFERENCE TO LREAL
]]></Declaration>
      <Get Name="Get" Id="{45caf024-a6be-4331-b374-785a09f8350e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PowerKw ref= lrPowerKw;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Speed" Id="{753ba39a-41cb-4b72-9fe3-f3313de28591}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY Speed : Reference to lreal]]></Declaration>
      <Get Name="Get" Id="{49930f98-2860-4343-85f5-4283bd6231b6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Speed REF= lrSpeed;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State" Id="{071f044c-ec91-4cc5-b4f4-08633519aa8a}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY State : reference to E_Vfd_State]]></Declaration>
      <Get Name="Get" Id="{8e514446-450b-4a10-82c2-8bbac004b178}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State REF= eVfdState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StateMachine" Id="{06e5e80d-790e-4127-8b0c-077bc3b579df}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED StateMachine
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eVfdState OF
	VFD_UNINITIALIZED :
		MS_Uninitialized();
		
	VFD_INITIALIZING	:
		MS_Initializing();
		
	VFD_READY_INITIALIZED :
		MS_ReadyInitialized();
		
	VFD_IDLE:
		MS_Idle();
	
	VFD_RUN_FORWARD	:
		MS_RunForward();
		
	VFD_RUN_FORWARD_DONE:
		MS_RunForwardDone();
	
	VFD_RUN_REVERSE	:
		MS_RunReverse();
	
	VFD_RUN_REVERSE_DONE:
		MS_RunReverseDone();
	
	VFD_STOP		:
		MS_Stop();
		
	VFD_STOP_DONE	:
		Ms_StopDone();
		
	VFD_RESET	:
		MS_Reset();
		
	VFD_RESET_DONE	:
		MS_ResetDone();
		
	VFD_ABORTING :
		MS_Aborting();
	
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="Status" Id="{369fec46-0056-41ca-87a6-cdc0cadd1ea3}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY Status : reference to E_VFD_Status]]></Declaration>
      <Get Name="Get" Id="{9e4eee11-2bc6-4f05-ae9a-2813c54f5019}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= eVfdStatus;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="timeStopDelay" Id="{bddd152c-7479-48f5-a66d-6af59f3be079}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY timeStopDelay : time]]></Declaration>
      <Get Name="Get" Id="{6ed82530-9480-4aa9-98cf-49da6417bb21}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[timeStopDelay := THIS^.tStopDelay;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{27b9ddbc-8f22-48ee-a23d-b9c5730d0081}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[tStopDelay := timeStopDelay;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Torque" Id="{3d53aa45-cc32-4e2d-a6b4-ef840ef74b12}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY Torque : reference to lreal]]></Declaration>
      <Get Name="Get" Id="{799b82bf-dc00-41b0-bd11-9b01342aa577}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Torque ref= Torque;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="TotalKwh" Id="{ec495c03-f67d-4bb0-89a4-4d9fcde617e4}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY TotalKwh : reference to lreal]]></Declaration>
      <Get Name="Get" Id="{c9add1a0-2dcc-4a63-869c-c84bcfb97d64}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TotalKwh REF= TotalKwh;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Warning" Id="{093b7dd2-48f2-40e7-9e74-deed0479d751}" FolderPath="Pro\">
      <Declaration><![CDATA[// not all vfd modbus available this function 
PROPERTY Warning : reference to bool]]></Declaration>
      <Get Name="Get" Id="{6add1c7d-ca63-4792-9026-eccda019afad}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Warning  ref= bWarning;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_UniversalVFDModbus">
      <LineId Id="87" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="214" Count="1" />
      <LineId Id="217" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="219" Count="1" />
      <LineId Id="218" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="223" Count="2" />
      <LineId Id="221" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="205" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Active.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.AcVoltageToMotor.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Busy.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Convert">
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="27" Count="8" />
      <LineId Id="37" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="45" Count="3" />
      <LineId Id="50" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Current.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.DcVoltage.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Error.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.ErrorID.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.FirstCycle">
      <LineId Id="61" Count="0" />
      <LineId Id="67" Count="3" />
      <LineId Id="60" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="49" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="28" Count="4" />
      <LineId Id="47" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.HzActual.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.HzControl.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.InHz.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.isRunForward.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.IsRunning.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.isRunReverse.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.isStop.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MR_Abort">
      <LineId Id="9" Count="4" />
      <LineId Id="23" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MR_Init">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MR_Reset">
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="20" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MR_RunForward">
      <LineId Id="13" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="18" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MR_RunReverse">
      <LineId Id="11" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="15" Count="3" />
      <LineId Id="22" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MR_Stop">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="5" />
      <LineId Id="9" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_Aborting">
      <LineId Id="8" Count="1" />
      <LineId Id="11" Count="1" />
      <LineId Id="21" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="4" />
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_Idle">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_Initializing">
      <LineId Id="27" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_ReadyInitialized">
      <LineId Id="6" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_Reset">
      <LineId Id="13" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_ResetDone">
      <LineId Id="6" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_RunForward">
      <LineId Id="10" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="11" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_RunForwardDone">
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_RunReverse">
      <LineId Id="20" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="27" Count="5" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_RunReverseDone">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_Stop">
      <LineId Id="23" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Ms_StopDone">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_Uninitialized">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Overload.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.PowerKw.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Speed.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.State.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.StateMachine">
      <LineId Id="2" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="79" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="86" Count="2" />
      <LineId Id="52" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="66" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="45" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Status.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.timeStopDelay.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.timeStopDelay.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Torque.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.TotalKwh.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Warning.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>